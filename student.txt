// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentRegistry{
    struct Student{
        string name;
        uint rollno;
        uint age;
        string gender;
    }

    Student[] private students;
    address public owner;

    event StudentAdded(string name,uint rollno,uint age,string gender);
    event ReceivedEther(address indexed sender,uint value);

    constructor()
    {
        owner = msg.sender;
    }

    fallback() external payable {
        emit ReceivedEther(msg.sender, msg.value);
     }

    function addStudent(string memory name, uint rollno, uint age, string memory gender)public {
        students.push(Student(name,rollno,age,gender));
        emit StudentAdded(name, rollno, age, gender);
    }
    function getStudent(uint rollno)public view returns (string memory name,uint,uint,string memory)
    {
        for(uint i = 0;i<students.length;i++)
        {
            if(students[i].rollno==rollno)
            {
                return (students[i].name,students[i].rollno,students[i].age,students[i].gender);
            }
        }revert("Student not found");
    }
    function gettotalcount() public view returns(uint)
    {
        return students.length;
    }
    receive() external payable {
        emit ReceivedEther(msg.sender, msg.value);
     }

}